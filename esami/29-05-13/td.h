[4mfork[24m(2)                                                                  System Calls Manual                                                                 [4mfork[24m(2)

[1mNAME[0m
       fork - create a child process

[1mLIBRARY[0m
       Standard C library ([4mlibc[24m, [4m-lc[24m)

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m

       [1mpid_t fork(void);[0m

[1mDESCRIPTION[0m
       [1mfork[22m() creates a new process by duplicating the calling process.  The new process is referred to as the [4mchild[24m process.  The calling process is referred to as
       the [4mparent[24m process.

       The child process and the parent process run in separate memory spaces.  At the time of [1mfork[22m() both memory spaces have the same content.  Memory writes, file
       mappings ([1mmmap[22m(2)), and unmappings ([1mmunmap[22m(2)) performed by one of the processes do not affect the other.

       The child process is an exact duplicate of the parent process except for the following points:

       ‚Ä¢  The child has its own unique process ID, and this PID does not match the ID of any existing process group ([1msetpgid[22m(2)) or session.

       ‚Ä¢  The child's parent process ID is the same as the parent's process ID.

       ‚Ä¢  The child does not inherit its parent's memory locks ([1mmlock[22m(2), [1mmlockall[22m(2)).

       ‚Ä¢  Process resource utilizations ([1mgetrusage[22m(2)) and CPU time counters ([1mtimes[22m(2)) are reset to zero in the child.

       ‚Ä¢  The child's set of pending signals is initially empty ([1msigpending[22m(2)).

       ‚Ä¢  The child does not inherit semaphore adjustments from its parent ([1msemop[22m(2)).

       ‚Ä¢  The child does not inherit process-associated record locks from its parent ([1mfcntl[22m(2)).  (On the other hand, it does inherit [1mfcntl[22m(2) open file description
          locks and [1mflock[22m(2) locks from its parent.)

       ‚Ä¢  The child does not inherit timers from its parent ([1msetitimer[22m(2), [1malarm[22m(2), [1mtimer_create[22m(2)).

       ‚Ä¢  The  child  does not inherit outstanding asynchronous I/O operations from its parent ([1maio_read[22m(3), [1maio_write[22m(3)), nor does it inherit any asynchronous I/O
          contexts from its parent (see [1mio_setup[22m(2)).

       The process attributes in the preceding list are all specified in POSIX.1.  The parent and child also differ with respect  to  the  following  Linux-specific
       process attributes:

       ‚Ä¢  The child does not inherit directory change notifications (dnotify) from its parent (see the description of [1mF_NOTIFY [22min [1mfcntl[22m(2)).

       ‚Ä¢  The [1mprctl[22m(2) [1mPR_SET_PDEATHSIG [22msetting is reset so that the child does not receive a signal when its parent terminates.

       ‚Ä¢  The default timer slack value is set to the parent's current timer slack value.  See the description of [1mPR_SET_TIMERSLACK [22min [1mprctl[22m(2).

       ‚Ä¢  Memory mappings that have been marked with the [1mmadvise[22m(2) [1mMADV_DONTFORK [22mflag are not inherited across a [1mfork[22m().

       ‚Ä¢  Memory  in address ranges that have been marked with the [1mmadvise[22m(2) [1mMADV_WIPEONFORK [22mflag is zeroed in the child after a [1mfork[22m().  (The [1mMADV_WIPEONFORK [22mset‚Äê
          ting remains in place for those address ranges in the child.)

       ‚Ä¢  The termination signal of the child is always [1mSIGCHLD [22m(see [1mclone[22m(2)).

       ‚Ä¢  The port access permission bits set by [1mioperm[22m(2) are not inherited by the child; the child must turn on any bits that it requires using [1mioperm[22m(2).

       Note the following further points:

       ‚Ä¢  The child process is created with a single thread‚Äîthe one that called [1mfork[22m().  The entire virtual address space of the parent is replicated in the  child,
          including  the  states  of mutexes, condition variables, and other pthreads objects; the use of [1mpthread_atfork[22m(3) may be helpful for dealing with problems
          that this can cause.

       ‚Ä¢  After a [1mfork[22m() in a multithreaded program, the child can safely call only async-signal-safe functions (see [1msignal-safety[22m(7)) until such time as  it  calls
          [1mexecve[22m(2).

       ‚Ä¢  The  child  inherits copies of the parent's set of open file descriptors.  Each file descriptor in the child refers to the same open file description (see
          [1mopen[22m(2)) as the corresponding file descriptor in the parent.  This means that the two file descriptors share open file status flags, file offset, and sig‚Äê
          nal-driven I/O attributes (see the description of [1mF_SETOWN [22mand [1mF_SETSIG [22min [1mfcntl[22m(2)).

       ‚Ä¢  The child inherits copies of the parent's set of open message queue descriptors (see [1mmq_overview[22m(7)).  Each file descriptor in the  child  refers  to  the
          same  open  message  queue  description as the corresponding file descriptor in the parent.  This means that the two file descriptors share the same flags
          ([4mmq_flags[24m).

       ‚Ä¢  The child inherits copies of the parent's set of open directory streams (see [1mopendir[22m(3)).  POSIX.1 says that the corresponding directory  streams  in  the
          parent and child [4mmay[24m share the directory stream positioning; on Linux/glibc they do not.

[1mRETURN VALUE[0m
       On  success,  the  PID  of  the  child process is returned in the parent, and 0 is returned in the child.  On failure, -1 is returned in the parent, no child
       process is created, and [4merrno[24m is set to indicate the error.

[1mERRORS[0m
       [1mEAGAIN [22mA system-imposed limit on the number of threads was encountered.  There are a number of limits that may trigger this error:

              ‚Ä¢  the [1mRLIMIT_NPROC [22msoft resource limit (set via [1msetrlimit[22m(2)), which limits the number of processes and threads for a real user ID, was reached;

              ‚Ä¢  the kernel's system-wide limit on the number of processes and threads, [4m/proc/sys/kernel/threads-max[24m, was reached (see [1mproc[22m(5));

              ‚Ä¢  the maximum number of PIDs, [4m/proc/sys/kernel/pid_max[24m, was reached (see [1mproc[22m(5)); or

              ‚Ä¢  the PID limit ([4mpids.max[24m) imposed by the cgroup "process number" (PIDs) controller was reached.

       [1mEAGAIN [22mThe caller is operating under the [1mSCHED_DEADLINE [22mscheduling policy and does not have the reset-on-fork flag set.  See [1msched[22m(7).

       [1mENOMEM fork[22m() failed to allocate the necessary kernel structures because memory is tight.

       [1mENOMEM [22mAn attempt was made to create a child process in a PID namespace whose "init" process has terminated.  See [1mpid_namespaces[22m(7).

       [1mENOSYS fork[22m() is not supported on this platform (for example, hardware without a Memory-Management Unit).

       [1mERESTARTNOINTR [22m(since Linux 2.6.17)
              System call was interrupted by a signal and will be restarted.  (This can be seen only during a trace.)

[1mVERSIONS[0m
   [1mC library/kernel differences[0m
       Since glibc 2.3.3, rather than invoking the kernel's [1mfork[22m() system call, the glibc [1mfork[22m() wrapper that is provided as part of the NPTL threading  implementa‚Äê
       tion invokes [1mclone[22m(2) with flags that provide the same effect as the traditional system call.  (A call to [1mfork[22m() is equivalent to a call to [1mclone[22m(2) specify‚Äê
       ing [4mflags[24m as just [1mSIGCHLD[22m.)  The glibc wrapper invokes any fork handlers that have been established using [1mpthread_atfork[22m(3).

[1mSTANDARDS[0m
       POSIX.1-2008.

[1mHISTORY[0m
       POSIX.1-2001, SVr4, 4.3BSD.

[1mNOTES[0m
       Under  Linux,  [1mfork[22m()  is implemented using copy-on-write pages, so the only penalty that it incurs is the time and memory required to duplicate the parent's
       page tables, and to create a unique task structure for the child.

[1mEXAMPLES[0m
       See [1mpipe[22m(2) and [1mwait[22m(2) for more examples.

       #include <signal.h>
       #include <stdint.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(void)
       {
           pid_t pid;

           if (signal(SIGCHLD, SIG_IGN) == SIG_ERR) {
               perror("signal");
               exit(EXIT_FAILURE);
           }
           pid = fork();
           switch (pid) {
           case -1:
               perror("fork");
               exit(EXIT_FAILURE);
           case 0:
               puts("Child exiting.");
               exit(EXIT_SUCCESS);
           default:
               printf("Child is PID %jd\n", (intmax_t) pid);
               puts("Parent exiting.");
               exit(EXIT_SUCCESS);
           }
       }

[1mSEE ALSO[0m
       [1mclone[22m(2), [1mexecve[22m(2), [1mexit[22m(2), [1msetrlimit[22m(2), [1munshare[22m(2), [1mvfork[22m(2), [1mwait[22m(2), [1mdaemon[22m(3), [1mpthread_atfork[22m(3), [1mcapabilities[22m(7), [1mcredentials[22m(7)

Linux man-pages 6.7                                                          2023-10-31                                                                      [4mfork[24m(2)
